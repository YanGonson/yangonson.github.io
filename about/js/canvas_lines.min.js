$(function() {
    var s, l, c, t = 0,
    i = 0,
    r = window.innerWidth / 2,
    n = window.innerHeight / 2;
    function p() {
        r = window.innerWidth / 2,
        n = window.innerHeight / 2,
        s.aspect = window.innerWidth / window.innerHeight,
        s.updateProjectionMatrix(),
        c.setSize(window.innerWidth, window.innerHeight)
    }
    function E(e) {
        t = e.clientX - r,
        i = e.clientY - n
    }
    function d(e) {
        1 < e.touches.length && (t = e.touches[0].pageX - r)
    }
    function h(e) {
        1 == e.touches.length && (t = e.touches[0].pageX - r)
    } !
    function() {
        var e, t; (e = document.createElement("div")).style.position = "fixed",
        e.style.top = "0px",
        e.style.left = "0px",
        e.style.zIndex = "-1",
        e.style.opacity = "0.5",
        document.body.appendChild(e),
        (s = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1e4)).position.z = 100,
        l = new THREE.Scene,
        (c = new THREE.CanvasRenderer({
            alpha: !0
        })).setPixelRatio(window.devicePixelRatio),
        c.setSize(window.innerWidth, window.innerHeight),
        e.appendChild(c.domElement);
        for (var i = 2 * Math.PI,
        r = new THREE.SpriteCanvasMaterial({
            color: 90000000,
            //color: 10811135,
            program: function(e) {
                e.beginPath(),
                e.arc(0, 0, .5, 0, i, !0),
                e.fill()
            }
        }), n = new THREE.Geometry, o = 0; o < 100; o++)(t = new THREE.Sprite(r)).position.x = 2 * Math.random() - 1,
        t.position.y = 2 * Math.random() - 1,
        t.position.z = 2 * Math.random() - 1,
        t.position.normalize(),
        t.position.multiplyScalar(1 * Math.random() + 1000),
        t.scale.x = t.scale.y = 10,
        l.add(t),
        n.vertices.push(t.position);
        var a = new THREE.Line(n, new THREE.LineBasicMaterial({
            color: 90000000,
            
            //color: 10811135,
            opacity: .5
        }));
        l.add(a),
        document.addEventListener("mousemove", E, !1),
        document.addEventListener("touchstart", d, !1),
        document.addEventListener("touchmove", h, !1),
        window.addEventListener("resize", p, !1)
    } (),
    function e() {
        requestAnimationFrame(e);
        s.position.x += .05 * (t - s.position.x),
        s.position.y += .05 * (200 - i - s.position.y),
        s.lookAt(l.position),
        c.render(l, s)
    } ()
}),
THREE.SpriteCanvasMaterial = function(e) {
    THREE.Material.call(this),
    this.type = "SpriteCanvasMaterial",
    this.color = new THREE.Color(16777215),
    this.program = function(e, t) {},
    this.setValues(e)
},
THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype),
THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial,
THREE.SpriteCanvasMaterial.prototype.clone = function() {
    var e = new THREE.SpriteCanvasMaterial;
    return e.copy(this),
    e.color.copy(this.color),
    e.program = this.program,
    e
},
THREE.CanvasRenderer = function(e) {
    console.log("THREE.CanvasRenderer", THREE.REVISION),
    e = e || {};
    var s, l, f, c, p, E, u, m, v, x, R, y, T, w, H, g, S, M, b, C = this,
    d = new THREE.Projector,
    r = void 0 !== e.canvas ? e.canvas: document.createElement("canvas"),
    h = r.width,
    z = r.height,
    V = Math.floor(h / 2),
    j = Math.floor(z / 2),
    L = 0,
    O = 0,
    B = h,
    W = z,
    n = 1,
    P = r.getContext("2d", {
        alpha: !0 === e.alpha
    }),
    i = new THREE.Color(0),
    o = !0 === e.alpha ? 0 : 1,
    a = 1,
    k = 0,
    N = null,
    F = null,
    A = null,
    I = null,
    D = null,
    t = [],
    G = (new THREE.RenderableVertex, new THREE.RenderableVertex, new THREE.Color),
    U = (new THREE.Color, new THREE.Color, new THREE.Color, new THREE.Color, new THREE.Color),
    q = new THREE.Color,
    X = new THREE.Color,
    J = {},
    Y = new THREE.Box2,
    $ = new THREE.Box2,
    K = new THREE.Box2,
    Q = new THREE.Color,
    Z = new THREE.Color,
    _ = new THREE.Color,
    ee = new THREE.Vector3,
    te = new THREE.Vector3,
    ie = new THREE.Vector3,
    re = new THREE.Matrix3;
    function ne(e, t, i) {
        de(i.opacity),
        he(i.blending);
        var r = t.scale.x * V,
        n = t.scale.y * j,
        o = .5 * Math.sqrt(r * r + n * n);
        if (K.min.set(e.x - o, e.y - o), K.max.set(e.x + o, e.y + o), i instanceof THREE.SpriteMaterial) {
            var a = i.map;
            if (null !== a) {
                var s = J[a.id];
                if (void 0 !== s && s.version === a.version || (s = ce(a), J[a.id] = s), void 0 !== s.canvas) {
                    xe(s.canvas);
                    var l = a.image,
                    c = l.width * a.offset.x,
                    p = l.height * a.offset.y,
                    E = l.width * a.repeat.x,
                    d = l.height * a.repeat.y,
                    h = r / E,
                    f = n / d;
                    P.save(),
                    P.translate(e.x, e.y),
                    0 !== i.rotation && P.rotate(i.rotation),
                    P.translate( - r / 2, -n / 2),
                    P.scale(h, f),
                    P.translate( - c, -p),
                    P.fillRect(c, p, E, d),
                    P.restore()
                }
            } else xe(i.color.getStyle()),
            P.save(),
            P.translate(e.x, e.y),
            0 !== i.rotation && P.rotate(i.rotation),
            P.scale(r, -n),
            P.fillRect( - .5, -.5, 1, 1),
            P.restore()
        } else i instanceof THREE.SpriteCanvasMaterial && (ve(i.color.getStyle()), xe(i.color.getStyle()), P.save(), P.translate(e.x, e.y), 0 !== i.rotation && P.rotate(i.rotation), P.scale(r, n), i.program(P), P.restore())
    }
    function oe(e, t, i, r) {
        if (de(r.opacity), he(r.blending), P.beginPath(), P.moveTo(e.positionScreen.x, e.positionScreen.y), P.lineTo(t.positionScreen.x, t.positionScreen.y), r instanceof THREE.LineBasicMaterial) {
            if (fe(r.linewidth), ue(r.linecap), me(r.linejoin), r.vertexColors !== THREE.VertexColors) ve(r.color.getStyle());
            else {
                var n = i.vertexColors[0].getStyle(),
                o = i.vertexColors[1].getStyle();
                if (n === o) ve(n);
                else {
                    try {
                        var a = P.createLinearGradient(e.positionScreen.x, e.positionScreen.y, t.positionScreen.x, t.positionScreen.y);
                        a.addColorStop(0, n),
                        a.addColorStop(1, o)
                    } catch(e) {
                        a = n
                    }
                    ve(a)
                }
            }
            P.stroke(),
            K.expandByScalar(2 * r.linewidth)
        } else r instanceof THREE.LineDashedMaterial && (fe(r.linewidth), ue(r.linecap), me(r.linejoin), ve(r.color.getStyle()), Re([r.dashSize, r.gapSize]), P.stroke(), K.expandByScalar(2 * r.linewidth), Re([]))
    }
    function ae(e, t, i, r, n, o, a, s) {
        var l, c, p, E, d, h;
        if (C.info.render.vertices += 3, C.info.render.faces++, de(s.opacity), he(s.blending), u = e.positionScreen.x, m = e.positionScreen.y, v = t.positionScreen.x, x = t.positionScreen.y, R = i.positionScreen.x, y = i.positionScreen.y, l = u, c = m, p = v, E = x, d = R, h = y, P.beginPath(), P.moveTo(l, c), P.lineTo(p, E), P.lineTo(d, h), P.closePath(), (s instanceof THREE.MeshLambertMaterial || s instanceof THREE.MeshPhongMaterial) && null === s.map) U.copy(s.color),
        q.copy(s.emissive),
        s.vertexColors === THREE.FaceColors && U.multiply(a.color),
        G.copy(Q),
        te.copy(e.positionWorld).add(t.positionWorld).add(i.positionWorld).divideScalar(3),
        function(e, t, i) {
            for (var r = 0,
            n = f.length; r < n; r++) {
                var o = f[r];
                if (X.copy(o.color), o instanceof THREE.DirectionalLight) {
                    var a = ee.setFromMatrixPosition(o.matrixWorld).normalize();
                    if ((s = t.dot(a)) 